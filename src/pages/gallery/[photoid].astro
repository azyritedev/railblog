---
import { getCollection } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import { Picture } from "astro:assets";
import Describe from "@/components/Describe.astro";
import Tag from "@/components/Tag.astro";

export async function getStaticPaths() {
  const photos = await getCollection("photos");
  return photos.map((photo) => ({
    params: { photoid: photo.id },
    props: { photo },
  }));
}

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/photos/*.jpg"
);

const { photo } = Astro.props;

// Find photos that list this one as "related" (i.e. backlinks)
const relatedPhotoIds = new Set<string>();
for (const related of photo.data.meta.related ?? []) {
  relatedPhotoIds.add(related.id);
}

const backLinkRelatedPhotos = await getCollection("photos").then((arr) =>
  arr.filter((p) => p.data.meta.related?.some((r) => r.id === photo.id))
);
for (const related of backLinkRelatedPhotos) {
  relatedPhotoIds.add(related.id);
}
---

<Layout>
  <section>
    <h1 class="text-xl font-bold">{photo.data.meta.title}</h1>
  </section>
  <main class="my-4 flex flex-col justify-center items-center">
    <div class="lg:w-3/4 xl:w-1/2">
      <Picture
        alt={photo.data.meta.detail}
        src={images[photo.data.key]!()}
        formats={["jpg", "webp"]}
        loading="eager"
        layout="full-width"
      />
    </div>
    <div>
      Original size: {photo.data.photo.width}x{photo.data.photo.height}px
    </div>
  </main>
  <section class="p-4 bg-gray-300 mb-2">
    <h2 class="text-lg font-bold">Description</h2>
    <div class="ml-4">
      <p>{photo.data.meta.detail}</p>
    </div>
    {
      photo.data.meta.notes && (
        <>
          <h2 class="text-lg font-bold">Additional Notes</h2>
          <div class="ml-4">
            <p>{photo.data.meta.notes}</p>
          </div>
        </>
      )
    }
    <h2 class="text-lg font-bold">Tags</h2>
    <div class="ml-4 flex flex-wrap gap-2 p-2">
      {photo.data.meta.tags.map((t) => <Tag tag={t.id} />)}
    </div>
    <h2 class="text-lg font-bold">Related Photos</h2>
    <div class="ml-4">
      <p>
        {
          relatedPhotoIds.size
            ? `${relatedPhotoIds.size} related photo(s) found`
            : "No related photos found :("
        }
      </p>
      {
        relatedPhotoIds.size > 0 && (
          <ul class="list-disc">
            {Array.from(relatedPhotoIds).map((id) => (
              <li>
                <a class="underline" href={`/gallery/${id}`}>
                  {id}
                </a>
              </li>
            ))}
          </ul>
        )
      }
    </div>
    <h2 class="text-lg font-bold">Photo Details</h2>
    <div class="ml-4">
      <Describe
        descriptions={{
          Photographer: photo.data.meta.author.id,
          Date: `${photo.data.meta.date?.toString() ?? photo.data.exif.date?.toString() ?? "No Date Found"} (${photo.data.meta.date?.toISOString() ?? photo.data.exif.date?.toISOString() ?? "No Date Found"})`,
          "Location (Approximate)":
            photo.data.meta.approxLocation ?? "Unspecified",
          Edited: (photo.data.meta.edited && "Yes") || "No",
          ID: photo.id,
        }}
      />
    </div>
    <h2 class="text-lg font-bold">Extracted EXIF</h2>
    <div class="ml-4">
      {
        photo.data.exif && (
          <>
            <p class="text-sm">
              EXIF data found, but it may be incomplete. Coordinates are
              provided LAT/LON in the format found in EXIF data with no
              processing apart from truncation to 6 decimal places.
            </p>
            <Describe
              descriptions={{
                "Camera Make": photo.data.exif.cameraMake ?? "Unknown",
                "Camera Model": photo.data.exif.cameraModel ?? "Unknown Model",
                Aperture: photo.data.exif.aperture
                  ? `f/${photo.data.exif.aperture}`
                  : "Unknown",
                ISO: photo.data.exif.iso?.toString() ?? "Unknown",
                "Exposure Time": photo.data.exif.exposureTime
                  ? `1/${Math.round(1 / photo.data.exif.exposureTime)}sec`
                  : "Unknown",
                Coordinates:
                  photo.data.exif.lat && photo.data.exif.lon
                    ? `${photo.data.exif.lat.toFixed(6)}, ${photo.data.exif.lon.toFixed(6)}`
                    : "No GPS data found",
              }}
            />
          </>
        )
      }
      {!photo.data.exif && <p class="text-sm">No EXIF data found :(</p>}
    </div>
  </section>
</Layout>
